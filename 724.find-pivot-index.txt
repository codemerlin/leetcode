
 * Input: 
 * nums = [1, 7, 3, 6, 5, 6]
 * Output: 3
 * Explanation: 
 * The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the
 * sum of numbers to the right of index 3.
 * Also, 3 is the first index where this occurs.



 * 
 * Example 2:
 * 
 * Input: 
 * nums = [1, 2, 3]
 * Output: -1
 * Explanation: 
 * There is no index that satisfies the conditions in the problem statement.
 * 

 
 getSumOfRemaining

 First get the total Sum

 then looop again and keep subtracting and maintaing the sum

 totalSum = 0
 remainingSum = 0
 currentSum = 0 

 for(i=0; i<input.Length; i++) {
    totalSum = totalSum + input[i]
 }

 remainingSum = totalSum
 
 for(i=0; i<input.Length;i++) {
     tempSum = remainingSum
     remainingSum = remainingSum - input[i]
     currentSum = totalSum - tempSum 
     if(remainingSum == currentSum)
         return i;
 } 

return -1;


 * nums = [1, 7, 3, 6, 5, 6]

 28

 i = 0
 input[0] = 1
 tempSum = 28
 remainingSum = 28 - 1 = 27
 currentSum = 28 - 28 = 0

 i=1
 input[1] = 7
 tempSum = 27
 remainingSum = 27 - 7 = 20 
 currentSum = 28 - 27 = 1 

 i=2
 input[2] = 3
 tempSum = 20 
 remainingSum = 20 - 3 = 17
 currentSum = 28 - 20 = 8

 i=3
 input[i] = 6
 tempSum = 17
 remainingSum = 17 - 6 = 11
 currentSum = 28 - 17 = 11 

 i = 4
 input[i] = 5
 remainingSum = 11-4 = 6
 currentSum = 28-6 = 22

